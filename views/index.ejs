<!DOCTYPE html>
<html>
<head>
    <title>Fiverr Message Rewriter</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        #toast-success {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: none;
        }
        .pagination-btn {
            @apply px-3 py-1 mx-1 rounded border;
        }
        .pagination-btn.active {
            @apply bg-blue-500 text-white;
        }
        .pagination-btn:disabled {
            @apply opacity-50 cursor-not-allowed;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900">
    <!-- Login Modal -->
    <div id="loginModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center flex z-50">
        <div class="bg-white p-8 rounded-lg w-96 relative shadow-xl">
            <button id="closeLoginModal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-700">
                <i class="fas fa-times text-xl"></i>
            </button>
            <div class="flex flex-col items-center mb-6">
                <i class="fas fa-user-circle text-5xl text-blue-500 mb-4"></i>
                <h2 class="text-2xl font-bold">Login</h2>
            </div>
            <form id="loginForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700">Email</label>
                    <div class="mt-1 relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-envelope text-gray-400"></i>
                        </div>
                        <input type="email" id="loginEmail" required 
                            class="pl-10 py-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Password</label>
                    <div class="mt-1 relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-lock text-gray-400"></i>
                        </div>
                        <input type="password" id="loginPassword" required 
                            class="pl-10 py-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                </div>
                <button type="submit" class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition duration-200">
                    Login
                </button>
            </form>
        </div>
    </div>

    <div class="container mx-auto py-8 px-6">
        <!-- Header with Auth Button -->
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-2xl font-bold text-gray-800 dark:text-white">Fiverr Message Rewriter</h1>
            <div id="authButtons">
                <button id="loginBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg">
                    Login
                </button>
            </div>
            <div id="userInfo" class="hidden">
                <span id="username" class="mr-4 text-gray-700 dark:text-gray-300"></span>
                <button id="logoutBtn" class="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg">
                    Logout
                </button>
            </div>
        </div>

        <!-- Public View: Approved Keywords -->
        <div id="publicView" class="mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <div class="flex flex-wrap gap-2 mb-4">
                <!-- Approved keywords will be displayed here -->
            </div>
            <div class="flex items-center gap-2">
                <input type="text" id="newKeywordRequest" placeholder="Request new keyword" 
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-48 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white">
                <button id="requestKeywordBtn" 
                    class="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg">
                    Request Keyword
                </button>
            </div>
        </div>

        <!-- Admin View: Keywords Management -->
        <div id="adminView" class="hidden">
            <div class="mb-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-800 dark:text-white">Keywords Management</h2>
                    <button id="deleteAllBtn" class="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg transition duration-200">
                        Delete All Keywords
                    </button>
                </div>
                
                <!-- Keywords Table -->
                <div class="overflow-x-auto">
                    <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                            <tr>
                                <th scope="col" class="px-6 py-3">Keyword</th>
                                <th scope="col" class="px-6 py-3">Status</th>
                                <th scope="col" class="px-6 py-3">Created At</th>
                                <th scope="col" class="px-6 py-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="keywordsTableBody"></tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="flex justify-center items-center mt-4" id="pagination">
                    <button id="prevPage" class="pagination-btn">Previous</button>
                    <span id="pageInfo" class="mx-4"></span>
                    <button id="nextPage" class="pagination-btn">Next</button>
                </div>
            </div>
        </div>

        <!-- Message Rewriter Section -->
        <div class="bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 p-8 rounded-xl shadow-2xl">
            <div class="flex items-center justify-between mb-8">
                <div class="flex items-center space-x-3">
                    <div class="bg-blue-500 p-2 rounded-lg">
                        <i class="fas fa-pen text-white text-xl"></i>
                    </div>
                    <h2 class="text-2xl font-bold text-gray-800 dark:text-white">Message Rewriter</h2>
                </div>
                <div class="bg-blue-50 dark:bg-gray-700 px-4 py-2 rounded-full hidden md:block">
                    <span class="text-sm text-blue-600 dark:text-blue-300">
                        <i class="fas fa-info-circle mr-2"></i>
                        Transform your message with one click
                    </span>
                </div>
            </div>

            <div class="flex justify-center gap-4 my-8">
                <button id="rewrite-btn" 
                    class="w-40 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2.5 px-4 rounded-lg transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                    disabled>
                    <i class="fas fa-sync-alt mr-2 h-4 w-4"></i>
                    Rewrite
                </button>
                <button id="copy-btn"
                    class="w-40 border border-gray-300 hover:bg-gray-50 text-gray-700 font-medium py-2.5 px-4 rounded-lg transition duration-200 flex items-center justify-center dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800 disabled:opacity-40 disabled:cursor-not-allowed"
                    disabled>
                    <i class="fas fa-copy mr-2 h-4 w-4"></i>
                    Copy
                </button>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="space-y-3">
                    <label for="message-input" class="flex items-center text-sm font-semibold text-gray-700 dark:text-gray-300">
                        <span class="bg-green-100 dark:bg-green-900 p-1.5 rounded-md mr-2">
                            <i class="fas fa-pen text-green-600 dark:text-green-400"></i>
                        </span>
                        Original Message
                    </label>
                    <textarea id="message-input" rows="6" 
                        class="block p-4 w-full text-sm text-gray-900 bg-white rounded-xl border-2 border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-800 dark:border-gray-700 dark:text-white transition-all duration-200 min-h-[144px] overflow-hidden"
                        placeholder="Start typing your message here..."></textarea>
                </div>

                <div class="space-y-3">
                    <label for="rewritten-message" class="flex items-center text-sm font-semibold text-gray-700 dark:text-gray-300">
                        <span class="bg-purple-100 dark:bg-purple-900 p-1.5 rounded-md mr-2">
                            <i class="fas fa-magic text-purple-600 dark:text-purple-400"></i>
                        </span>
                        Rewritten Message
                    </label>
                    <textarea id="rewritten-message" rows="6" readonly
                        class="block p-4 w-full text-sm text-gray-900 bg-white rounded-xl border-2 border-gray-200 dark:bg-gray-800 dark:border-gray-700 dark:text-white transition-all duration-200 opacity-50 min-h-[144px] overflow-hidden"
                        placeholder="Rewritten message will appear here..."></textarea>
                </div>
            </div>

        </div>

        <!-- Toast Notification -->
        <div id="toast-success" class="flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800 z-40" role="alert">
            <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200">
                <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"/>
                </svg>
            </div>
            <div id="toast-message" class="ml-3 text-sm font-normal"></div>
        </div>

        <!-- Highlighted Text Modal -->
        <div id="highlightModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center flex z-50">
            <div class="bg-white dark:bg-gray-800 p-8 rounded-lg w-11/12 md:w-3/4 lg:w-2/3 max-h-[80vh] relative shadow-xl">
                <button id="closeHighlightModal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                    <i class="fas fa-times text-xl"></i>
                </button>
                <div class="flex flex-col items-center mb-6">
                    <div class="bg-purple-100 dark:bg-purple-900 p-2 rounded-lg mb-4">
                        <i class="fas fa-highlighter text-purple-600 dark:text-purple-400 text-2xl"></i>
                    </div>
                    <h2 class="text-2xl font-bold text-gray-800 dark:text-white">Highlighted Changes</h2>
                </div>
                <div id="highlightedContent" class="overflow-y-auto max-h-[50vh] p-4 bg-gray-50 dark:bg-gray-900 rounded-lg">
                    <!-- Highlighted content will be inserted here -->
                </div>
            </div>
        </div>

        <script>
            // Auth state
            let currentUser = null;
            let currentPage = 1;
            const itemsPerPage = 10;

            // DOM Elements
            const loginModal = document.getElementById('loginModal');
            const loginForm = document.getElementById('loginForm');
            const loginBtn = document.getElementById('loginBtn');
            const closeLoginModal = document.getElementById('closeLoginModal');
            const userInfo = document.getElementById('userInfo');
            const authButtons = document.getElementById('authButtons');
            const logoutBtn = document.getElementById('logoutBtn');
            const username = document.getElementById('username');
            const publicView = document.getElementById('publicView');
            const adminView = document.getElementById('adminView');
            const keywordsTableBody = document.getElementById('keywordsTableBody');
            const prevPageBtn = document.getElementById('prevPage');
            const nextPageBtn = document.getElementById('nextPage');
            const pageInfo = document.getElementById('pageInfo');
            const newKeywordRequest = document.getElementById('newKeywordRequest');
            const requestKeywordBtn = document.getElementById('requestKeywordBtn');
            const messageInput = document.getElementById('message-input');
            const rewrittenMessage = document.getElementById('rewritten-message');
            const rewriteBtn = document.getElementById('rewrite-btn');
            const copyBtn = document.getElementById('copy-btn');
            const toast = document.getElementById('toast-success');
            const toastMessage = document.getElementById('toast-message');
            const highlightViewBtn = document.getElementById('highlight-view-btn');
            const highlightModal = document.getElementById('highlightModal');
            const closeHighlightModal = document.getElementById('closeHighlightModal');
            const highlightedContent = document.getElementById('highlightedContent');

            // Check for existing auth token
            function checkAuth() {
                const token = localStorage.getItem('token');
                const user = JSON.parse(localStorage.getItem('user'));
                if (token && user) {
                    currentUser = user;
                    updateUIForAuth();
                }
            }

            // Update UI based on auth state
            function updateUIForAuth() {
                if (currentUser) {
                    authButtons.classList.add('hidden');
                    userInfo.classList.remove('hidden');
                    username.textContent = currentUser.username;
                    if (currentUser.role === 'admin') {
                        adminView.classList.remove('hidden');
                        publicView.classList.add('hidden');
                        fetchKeywordsAdmin();
                    }
                } else {
                    authButtons.classList.remove('hidden');
                    userInfo.classList.add('hidden');
                    adminView.classList.add('hidden');
                    publicView.classList.remove('hidden');
                    username.textContent = '';
                }
                fetchApprovedKeywords();
            }

            // Show toast message
            function showToast(message, duration = 4000) {
                toastMessage.textContent = message;
                toast.style.display = 'flex';
                setTimeout(() => {
                    toast.style.display = 'none';
                }, duration);
            }

            // Fetch approved keywords for public view
            async function fetchApprovedKeywords() {
                try {
                    const response = await fetch('/keywords/approved');
                    if (!response.ok) throw new Error('Failed to fetch approved keywords');
                    const keywords = await response.json();
                    
                    const container = publicView.querySelector('.flex-wrap');
                    container.innerHTML = '';
                    
                    keywords.forEach(keyword => {
                        const pill = document.createElement('span');
                        pill.className = 'px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium';
                        pill.textContent = keyword.word;
                        container.appendChild(pill);
                    });
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error fetching approved keywords');
                }
            }

            // Fetch keywords for admin view with pagination
            async function fetchKeywordsAdmin() {
                if (!currentUser || currentUser.role !== 'admin') return;

                try {
                    const response = await fetch(`/keywords?page=${currentPage}&limit=${itemsPerPage}`);
                    if (!response.ok) throw new Error('Failed to fetch keywords');
                    const data = await response.json();
                    
                    keywordsTableBody.innerHTML = '';
                    data.keywords.forEach(keyword => {
                        const row = document.createElement('tr');
                        row.className = 'bg-white border-b dark:bg-gray-800 dark:border-gray-700';
                        row.innerHTML = `
                            <td class="px-6 py-4">${keyword.word}</td>
                            <td class="px-6 py-4">
                                <span class="px-2 py-1 rounded ${keyword.isApproved ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                    ${keyword.isApproved ? 'Approved' : 'Pending'}
                                </span>
                            </td>
                            <td class="px-6 py-4">${new Date(keyword.createdAt).toLocaleDateString()}</td>
                            <td class="px-6 py-4">
                                <button onclick="toggleApproval('${keyword._id}')" class="text-blue-600 hover:text-blue-900 mr-2">
                                    ${keyword.isApproved ? 'Unapprove' : 'Approve'}
                                </button>
                                <button onclick="deleteKeyword('${keyword._id}')" class="text-red-600 hover:text-red-900">
                                    Delete
                                </button>
                            </td>
                        `;
                        keywordsTableBody.appendChild(row);
                    });

                    // Update pagination
                    pageInfo.textContent = `Page ${data.currentPage} of ${data.totalPages}`;
                    prevPageBtn.disabled = data.currentPage <= 1;
                    nextPageBtn.disabled = data.currentPage >= data.totalPages;
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error fetching keywords');
                }
            }

            // Login handler
            async function handleLogin(e) {
                e.preventDefault();
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;

                try {
                    const response = await fetch('/api/auth/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ email, password }),
                    });

                    if (!response.ok) throw new Error('Invalid credentials');

                    const data = await response.json();
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('user', JSON.stringify(data.user));
                    currentUser = data.user;
                    
                    loginModal.classList.add('hidden');
                    showToast('Login successful');
                    updateUIForAuth();
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Login failed: ' + error.message);
                }
            }

            // Logout handler
            function handleLogout() {
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                currentUser = null;
                updateUIForAuth();
                showToast('Logged out successfully');
            }

            // Request new keyword (public)
            async function requestKeyword() {
                const word = newKeywordRequest.value.trim();
                if (!word) return;

                try {
                    const response = await fetch('/keywords/request', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ word }),
                    });

                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to submit keyword request');
                    }

                    newKeywordRequest.value = '';
                    showToast('Your keyword request has been submitted');
                    fetchApprovedKeywords();
                } catch (error) {
                    console.error('Error:', error);
                    showToast(error.message);
                }
            }

            // Toggle keyword approval (admin only)
            async function toggleApproval(id) {
                if (!currentUser || currentUser.role !== 'admin') return;

                try {
                    const response = await fetch(`/keywords/${id}/approve`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        },
                    });

                    if (!response.ok) throw new Error('Failed to update keyword status');

                    showToast('Keyword status updated successfully');
                    fetchKeywordsAdmin();
                    fetchApprovedKeywords();
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error updating keyword status');
                }
            }

            // Delete keyword (admin only)
            async function deleteKeyword(id) {
                if (!currentUser || currentUser.role !== 'admin') return;
                
                try {
                    const response = await fetch(`/keywords/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        },
                    });

                    if (!response.ok) throw new Error('Failed to delete keyword');

                    showToast('Keyword deleted successfully');
                    fetchKeywordsAdmin();
                    fetchApprovedKeywords();
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error deleting keyword');
                }
            }

            // Delete all keywords
            const deleteAllBtn = document.getElementById('deleteAllBtn');
            deleteAllBtn.addEventListener('click', async () => {
                try {
                    const response = await fetch('/keywords/deleteAll', {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        },
                    });

                    if (!response.ok) throw new Error('Failed to delete all keywords');

                    showToast('All keywords deleted successfully');
                    fetchKeywordsAdmin();
                    fetchApprovedKeywords();
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error deleting all keywords');
                }
            });

            // Helper function to rewrite individual words
            function rewriteWord(word) {
                if (word.length <= 2) return word; // Don't rewrite short words

                // Choose either dash or underscore randomly
                const symbol = Math.random() < 0.5 ? '-' : '_';
                
                // Find a random position in the middle of the word (not first or last character)
                const position = Math.floor(Math.random() * (word.length - 2)) + 1;
                
                // Insert the symbol at the random position
                return word.slice(0, position) + symbol + word.slice(position);
            }

            // Rewrite message using approved keywords and custom logic
            async function rewriteMessage() {
                const message = messageInput.value;
                if (!message) return;

                try {
                    rewriteBtn.disabled = true;
                    rewriteBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Rewriting...';

                    const response = await fetch('/keywords/approved');
                    if (!response.ok) throw new Error('Failed to fetch approved keywords');
                    
                    const keywords = await response.json();
                    const originalNewlines = message.split('\n');

                    let rewrittenMessageText = originalNewlines.map(line => {
                        if (!line) return line; // Preserve empty lines

                        // URL regex pattern to identify links
                        const urlPattern = /(https?:\/\/[^\s]+)/g;
                        
                        // Split the line by URLs
                        const parts = line.split(urlPattern);
                        
                        // Process each part - if it's a URL, keep it as is; otherwise, rewrite it
                        const processedParts = parts.map((part, index) => {
                            // Check if this part is a URL (every odd index after splitting by URL pattern)
                            if (index % 2 === 1) {
                                // This is a URL, return it unchanged
                                return part;
                            } else {
                                // This is regular text, apply rewriting
                                let rewrittenPart = part;
                                keywords.forEach(keyword => {
                                    const regex = new RegExp(keyword.word, 'gi');
                                    rewrittenPart = rewrittenPart.replace(regex, rewriteWord);
                                });
                                return rewrittenPart;
                            }
                        });
                        
                        // Join the parts back together
                        return processedParts.join('');
                    }).join('\n');

                    rewrittenMessage.value = rewrittenMessageText;
                    
                    // Enable copy button and set opacity
                    rewrittenMessage.style.opacity = "1";
                    copyBtn.disabled = false;

                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error rewriting message');
                    copyBtn.disabled = true;
                } finally {
                    rewriteBtn.disabled = false;
                    rewriteBtn.innerHTML = '<i class="fas fa-sync-alt mr-2 h-4 w-4"></i>Rewrite';
                }
            }

            // Event listener for message input to enable/disable rewrite button
            messageInput.addEventListener('input', function() {
                const isEmpty = this.value.trim() === '';
                rewriteBtn.disabled = isEmpty;
                rewriteBtn.classList.toggle('opacity-50', isEmpty);
                rewriteBtn.classList.toggle('cursor-not-allowed', isEmpty);
                
                if (isEmpty) {
                    rewrittenMessage.value = '';
                    copyBtn.disabled = true;
                } else {
                    copyBtn.disabled = false;
                }
            });

            // Copy button functionality with animation
            copyBtn.addEventListener('click', () => {
                if (rewrittenMessage.value.trim() === '') return;
                
                rewrittenMessage.select();
                document.execCommand('copy');
                
                // Add temporary animation class
                copyBtn.innerHTML = '<i class="fas fa-check mr-2 text-white"></i><span class="text-white">Copied!</span>';
                copyBtn.classList.add('bg-green-500', 'hover:bg-green-600');
                
                setTimeout(() => {
                    copyBtn.innerHTML = '<i class="fas fa-copy mr-2"></i>Copy';
                    copyBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
                }, 2000);
                
                showToast('Copied to clipboard!');
            });

            // Auto resize textareas
            function autoResize(textarea) {
                // Reset height to auto to get the correct scrollHeight
                textarea.style.height = 'auto';
                // Set new height based on scrollHeight
                textarea.style.height = textarea.scrollHeight + 'px';
            }

            // Initialize auto-resize for both textareas
            messageInput.addEventListener('input', function() {
                autoResize(this);
                // Sync heights between textareas
                rewrittenMessage.style.height = this.style.height;
            });

            // Also handle the rewritten message height when it gets new content
            const originalAutoResize = rewriteMessage;
            rewriteMessage = async function() {
                await originalAutoResize.apply(this, arguments);
                // After rewriting, adjust heights
                autoResize(messageInput);
                rewrittenMessage.style.height = messageInput.style.height;
            };

            // Initial resize
            autoResize(messageInput);
            rewrittenMessage.style.height = messageInput.style.height;

            // Add metadata toggle and fields
            const messageContainer = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.gap-6');
            
            // Create metadata toggle section
            const metadataToggleSection = document.createElement('div');
            metadataToggleSection.className = 'flex items-center justify-between mt-6 mb-2';
            metadataToggleSection.innerHTML = `
                <div class="flex items-center">
                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300 mr-3">Add Message Metadata</span>
                    <button type="button" id="metadata-toggle" 
                        class="relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-gray-200 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2" 
                        role="switch" aria-checked="false">
                        <span class="sr-only">Toggle metadata fields</span>
                        <span class="pointer-events-none relative inline-block h-5 w-5 translate-x-0 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out">
                            <!-- Not Enabled: Cross icon -->
                            <span class="absolute inset-0 flex h-full w-full items-center justify-center opacity-100 transition-opacity duration-200 ease-in" aria-hidden="true">
                                <svg class="h-3 w-3 text-gray-400" fill="none" viewBox="0 0 12 12">
                                    <path d="M4 8l2-2m0 0l2-2M6 6L4 4m2 2l2 2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            </span>
                            <!-- Enabled: Check icon -->
                            <span class="absolute inset-0 flex h-full w-full items-center justify-center opacity-0 transition-opacity duration-100 ease-out" aria-hidden="true">
                                <svg class="h-3 w-3 text-blue-600" fill="currentColor" viewBox="0 0 12 12">
                                    <path d="M3.707 5.293a1 1 0 00-1.414 1.414l1.414-1.414zM5 8l-.707.707a1 1 0 001.414 0L5 8zm4.707-3.293a1 1 0 00-1.414-1.414l1.414 1.414zm-7.414 2l2 2 1.414-1.414-2-2-1.414 1.414zm3.414 2l4-4-1.414-1.414-4 4 1.414 1.414z" />
                                </svg>
                            </span>
                        </span>
                    </button>
                    <button id="highlight-view-btn" class="ml-3 text-blue-500 hover:text-blue-700 focus:outline-none" title="View highlighted changes">
                        <i class="fas fa-highlighter text-purple-600 dark:text-purple-400 text-lg"></i>
                       
                    </button>
                </div>
            `;
            
            // Create metadata fields container
            const metadataFields = document.createElement('div');
            metadataFields.id = 'metadata-fields';
            metadataFields.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-4 hidden';
            metadataFields.innerHTML = `
                <div>
                    <input type="text" id="message-type" placeholder="Message Type" 
                        class="block p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                </div>
                <div>
                    <input type="text" id="client-name" placeholder="Client Name" 
                        class="block p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                </div>
                <div>
                    <input type="text" id="profile-name" placeholder="Profile Name" 
                        class="block p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                </div>
                <div>
                    <input type="text" id="order-id" placeholder="Order ID" 
                        class="block p-2.5 w-full text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                </div>
            `;
            
            // Insert the toggle and fields after the message container
            messageContainer.parentNode.insertBefore(metadataToggleSection, messageContainer.nextSibling);
            messageContainer.parentNode.insertBefore(metadataFields, metadataToggleSection.nextSibling);
            
            // Toggle metadata fields visibility - updated for the new toggle button
            document.getElementById('metadata-toggle').addEventListener('click', function() {
                const metadataFields = document.getElementById('metadata-fields');
                const isEnabled = this.getAttribute('aria-checked') === 'true';
                
                // Toggle the state
                if (!isEnabled) {
                    // Enable
                    this.setAttribute('aria-checked', 'true');
                    this.classList.remove('bg-gray-200');
                    this.classList.add('bg-blue-600');
                    
                    // Move the circle
                    const circle = this.querySelector('.pointer-events-none');
                    circle.classList.remove('translate-x-0');
                    circle.classList.add('translate-x-5');
                    
                    // Switch icons
                    const crossIcon = circle.querySelector('.opacity-100');
                    const checkIcon = circle.querySelector('.opacity-0');
                    crossIcon.classList.remove('opacity-100', 'duration-200', 'ease-in');
                    crossIcon.classList.add('opacity-0', 'duration-100', 'ease-out');
                    checkIcon.classList.remove('opacity-0', 'duration-100', 'ease-out');
                    checkIcon.classList.add('opacity-100', 'duration-200', 'ease-in');
                    
                    // Show fields
                    metadataFields.classList.remove('hidden');
                } else {
                    // Disable
                    this.setAttribute('aria-checked', 'false');
                    this.classList.remove('bg-blue-600');
                    this.classList.add('bg-gray-200');
                    
                    // Move the circle
                    const circle = this.querySelector('.pointer-events-none');
                    circle.classList.remove('translate-x-5');
                    circle.classList.add('translate-x-0');
                    
                    // Switch icons
                    const crossIcon = circle.querySelector('.opacity-0');
                    const checkIcon = circle.querySelector('.opacity-100');
                    crossIcon.classList.remove('opacity-0', 'duration-100', 'ease-out');
                    crossIcon.classList.add('opacity-100', 'duration-200', 'ease-in');
                    checkIcon.classList.remove('opacity-100', 'duration-200', 'ease-in');
                    checkIcon.classList.add('opacity-0', 'duration-100', 'ease-out');
                    
                    // Hide fields
                    metadataFields.classList.add('hidden');
                }
            });
            
            // Modify rewrite function to include metadata when enabled
            const originalRewriteMessage = rewriteMessage;
            rewriteMessage = async function() {
                await originalRewriteMessage.apply(this, arguments);
                
                // Check if metadata toggle is enabled
                if (document.getElementById('metadata-toggle').getAttribute('aria-checked') === 'true') {
                    const messageType = document.getElementById('message-type').value.trim();
                    const clientName = document.getElementById('client-name').value.trim();
                    const profileName = document.getElementById('profile-name').value.trim();
                    const orderId = document.getElementById('order-id').value.trim();
                    
                    // Only append metadata if at least one field has a value
                    if (messageType || clientName || profileName || orderId) {
                        // Create an array of non-empty values
                        const metadataValues = [messageType, clientName, profileName, orderId].filter(value => value);
                        
                        // Join the non-empty values with the separator
                        const metadataLine = `\n\n${metadataValues.join(' || ')}`;
                        rewrittenMessage.value += metadataLine;
                    }
                }
                
                // Adjust heights after adding metadata
                autoResize(rewrittenMessage);
            };

            // Function to show the highlight modal with formatted content
            function showHighlightedChanges() {
                // Only show if there's content in the rewritten message
                if (!rewrittenMessage.value.trim()) {
                    showToast('No rewritten content to display');
                    return;
                }

                // Get the original and rewritten messages
                const originalText = messageInput.value;
                const rewrittenText = rewrittenMessage.value;
                
                // Fetch approved keywords to identify what was changed
                fetch('/keywords/approved')
                    .then(response => response.json())
                    .then(keywords => {
                        // Create a map of original words to their rewritten versions
                        const wordMap = new Map();
                        
                        // Process the original text to find words that match keywords
                        const originalWords = originalText.split(/\s+/);
                        const rewrittenWords = rewrittenText.split(/\s+/);
                        
                        // Find differences between original and rewritten text
                        let htmlContent = '';
                        const originalLines = originalText.split('\n');
                        const rewrittenLines = rewrittenText.split('\n');
                        
                        // Process each line
                        for (let i = 0; i < rewrittenLines.length; i++) {
                            if (i < originalLines.length) {
                                const originalLine = originalLines[i];
                                const rewrittenLine = rewrittenLines[i];
                                
                                if (originalLine === rewrittenLine) {
                                    // Line is unchanged
                                    htmlContent += `<p class="mb-2">${escapeHtml(rewrittenLine)}</p>`;
                                } else {
                                    // Line has changes, highlight the differences
                                    const highlightedLine = highlightChanges(originalLine, rewrittenLine, keywords);
                                    htmlContent += `<p class="mb-2">${highlightedLine}</p>`;
                                }
                            } else {
                                // This is likely metadata that was added
                                htmlContent += `<p class="mb-2 text-blue-600 dark:text-blue-400">${escapeHtml(rewrittenLines[i])}</p>`;
                            }
                        }
                        
                        // Set the content and show the modal
                        highlightedContent.innerHTML = htmlContent || '<p>No changes detected</p>';
                        highlightModal.classList.remove('hidden');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error processing highlighted view');
                    });
            }
            
            // Helper function to escape HTML special characters
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
            
            // Function to highlight changes between original and rewritten text
            function highlightChanges(originalLine, rewrittenLine, keywords) {
                let result = escapeHtml(rewrittenLine);
                
                // Find all words that contain a dash or underscore (potential rewrites)
                const rewrittenWords = rewrittenLine.split(/\s+/);
                
                for (const word of rewrittenWords) {
                    if (word.includes('-') || word.includes('_')) {
                        // This word might be rewritten
                        const baseWord = word.replace(/[-_]/g, '');
                        
                        // Improved matching logic to catch all rewritten words
                        let shouldHighlight = false;
                        
                        // Check if this is a rewritten keyword
                        for (const keyword of keywords) {
                            if (baseWord.toLowerCase() === keyword.word.toLowerCase()) {
                                shouldHighlight = true;
                                break;
                            }
                            
                            // Check if the word contains the keyword
                            if (baseWord.toLowerCase().includes(keyword.word.toLowerCase())) {
                                shouldHighlight = true;
                                break;
                            }
                        }
                        
                        if (shouldHighlight) {
                            // This is a rewritten word, highlight it
                            const escapedWord = escapeHtml(word);
                            // Use a more precise regex to avoid partial word matches
                            const regex = new RegExp(`(^|\\s)${escapedWord.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}(\\s|$|[.,!?;:])`, 'g');
                            result = result.replace(regex, (match, p1, p2) => 
                                `${p1}<span class="bg-yellow-200 dark:bg-yellow-800 px-1 rounded">${escapedWord}</span>${p2}`
                            );
                        }
                    }
                }
                
                return result;
            }
            
            // Event listeners
            loginBtn.addEventListener('click', () => loginModal.classList.remove('hidden'));
            closeLoginModal.addEventListener('click', () => loginModal.classList.add('hidden'));
            loginForm.addEventListener('submit', handleLogin);
            logoutBtn.addEventListener('click', handleLogout);
            requestKeywordBtn.addEventListener('click', requestKeyword);
            prevPageBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    fetchKeywordsAdmin();
                }
            });
            nextPageBtn.addEventListener('click', () => {
                currentPage++;
                fetchKeywordsAdmin();
            });
            rewriteBtn.addEventListener('click', rewriteMessage);
            
            // Fix for highlight modal not appearing
            document.addEventListener('DOMContentLoaded', function() {
                const highlightViewBtn = document.getElementById('highlight-view-btn');
                if (highlightViewBtn) {
                    highlightViewBtn.addEventListener('click', showHighlightedChanges);
                }
                
                const closeHighlightModal = document.getElementById('closeHighlightModal');
                if (closeHighlightModal) {
                    closeHighlightModal.addEventListener('click', () => {
                        document.getElementById('highlightModal').classList.add('hidden');
                    });
                }
                
                // Close modal when clicking outside
                const highlightModal = document.getElementById('highlightModal');
                if (highlightModal) {
                    highlightModal.addEventListener('click', (e) => {
                        if (e.target === highlightModal) {
                            highlightModal.classList.add('hidden');
                        }
                    });
                }
            });

            // Initialize
            checkAuth();
            fetchApprovedKeywords();
        </script>
    </body>
</html>